{% extends "::base.html.twig" %}
{% import "::macro/route/crud.html.twig" as route_crud %}

{% block title %}Info sur l'authorisation{% endblock %}

{% block inside_content %}
&nbsp;
{%
if not is_granted("IS_AUTHENTICATED_REMEMBERED")
%}
<a href="{{ path('EvocatioSecurityBundle_login') }}">log in</a>
{% else %}
<a href="{{ path('EvocatioSecurityBundle_logout') }}">log out</a>

{% for role in app.user.roles  %}
    {{ role }}
{% endfor %}
{% endif %}
<ul>
    {% for entity in entities %}
        <li>
        {{ entity.status }} - <strong>{{ entity.username }}</strong>
                <span>
   {{ entity.locked }}
                    </span> 
        <a href="{{ route_crud.path('evocatio_security_user_show', 'show', entity.id) }}">show</a>
                </li>
    {% else %}
                Pas d'entité
    {% endfor %}
<p>
GetRoles is not yet implemented correctly
</p>
see:
<a href="http://symfony.com/doc/current/cookbook/security/entity_provider.html">Référence</a>


<h2>Basics</h2>
    <p>The request flow when a user requests a protected resource is straightforward, but incredibly flexible. As you'll see later, authentication can be handled in any number of ways, including via a form login, X.509 certificate, or by authenticating the user via Twitter. Regardless of the authentication method, the request flow is always the same:
    A user accesses a protected resource;
    The application redirects the user to the login form;
    The user submits its credentials (e.g. username/password);
    The firewall authenticates the user;
    The authenticated user re-tries the original request.</p>

<h2>Forbid non status users</h2>
<p>
The easiest way to exclude non status users is to implement the AdvancedUserInterface interface that takes care of checking the user's account status. The AdvancedUserInterface extends the UserInterface interface, so you just need to switch to the new interface in the AcmeUserBundle:User entity class to benefit from simple and advanced authentication behaviors.
The AdvancedUserInterface interface adds four extra methods to validate the account status:
isAccountNonExpired() checks whether the user's account has expired,
isAccountNonLocked() checks whether the user is locked,
isCredentialsNonExpired() checks whether the user's credentials (password) has expired,
isEnabled() checks whether the user is enabled.
</p>

<a href="http://symfony.com/doc/current/cookbook/security/entity_provider.html#forbid-non-status-users">Voir référence</a>
<p>
Once the user has been logged out, he will be redirected to whatever path is defined by the target parameter above (e.g. the homepage). For more information on configuring the logout, see the Security Configuration Reference.
</p>

<a href="http://symfony.com/doc/current/reference/configuration/security.html">reference</a>

<h2>
    Code pour les vérifications de bases
</h2>
<pre>
{ % if is_granted('ROLE_ADMIN') %}
    <a href="#">Delete</a>
{ % endif %}
</pre>
<pre>
public function indexAction()
{
    // show different content to admin users
    if ($this->get('security.context')->isGranted('ROLE_ADMIN')) {
        // Load admin content here
    }
    // load other regular content here
}
</pre>

<h2> Switching Users made easy </h2>
<pre>
YAML
# app/config/security.yml
security:
    firewalls:
        main:
            # ...
            switch_user: true
</pre>
To switch to another user, just add a query string with the _switch_user parameter and the username as the value to the current URL:
<pre>
http://example.com/somewhere?_switch_user=thomas
</pre>
To switch back to the original user, use the special _exit username:
<pre>
http://example.com/somewhere?_switch_user=_exit
</pre>

<p>
Of course, this feature needs to be made available to a small group of users. By default, access is restricted to users having the ROLE_ALLOWED_TO_SWITCH role. The name of this role can be modified via the role setting. For extra security, you can also change the query parameter name via the parameter setting:
</p>
<a href="http://symfony.com/doc/current/book/security.html">Références</a>

<h2>More ... </h2>
<ul>
<li>
<a href="http://symfony.com/doc/current/cookbook/security/form_login.html">How to customize your Form Login</a>
</li>
<li>
<a href="http://symfony.com/doc/current/cookbook/security/custom_provider.html">How to create a custom User Provider (like getting user info thru webservice for login)</a>
</li>
<li>
<a href="http://symfony.com/doc/current/cookbook/security/custom_authentication_provider.html">How to create a custom Authentication Provider (define the encryption and creation of the token, WSSE and SOAP and REST authentication)</a>
</li>
<li>
<a href="http://symfony.com/doc/current/reference/configuration/security.html">Full Default Configuration</a>
</li>
<li>
<a href="http://api.symfony.com/2.0/Symfony/Bundle/FrameworkBundle/Templating/GlobalVariables.html#getUser()">Access User info in twig</a>
</li>
</ul>
{% endblock inside_content %}

